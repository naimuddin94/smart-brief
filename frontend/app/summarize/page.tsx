"use client"

import { useState } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { FileText, Upload, Wand2, Copy, Download, RefreshCw, ArrowLeft, Sparkles, Clock, BarChart3 } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Slider } from "@/components/ui/slider"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import Link from "next/link"

const fadeInUp = {
  initial: { opacity: 0, y: 30 },
  animate: { opacity: 1, y: 0 },
  transition: { duration: 0.5, ease: "easeOut" },
}

export default function SummarizePage() {
  const [inputText, setInputText] = useState("")
  const [summaryLength, setSummaryLength] = useState([30])
  const [summaryType, setSummaryType] = useState("balanced")
  const [isLoading, setIsLoading] = useState(false)
  const [summary, setSummary] = useState("")
  const [showSummary, setShowSummary] = useState(false)
  const [wordCount, setWordCount] = useState(0)

  const handleTextChange = (text: string) => {
    setInputText(text)
    setWordCount(
      text
        .trim()
        .split(/\s+/)
        .filter((word) => word.length > 0).length,
    )
  }

  const handleSummarize = async () => {
    if (!inputText.trim()) return

    setIsLoading(true)

    // Simulate API call
    setTimeout(() => {
      const mockSummary =
        "This is a mock summary of your content. In a real implementation, this would be generated by an AI model like OpenAI GPT or Google Gemini. The summary captures the key points and main ideas from your original text while maintaining the essence and important details."
      setSummary(mockSummary)
      setShowSummary(true)
      setIsLoading(false)
    }, 3000)
  }

  const handleCopy = () => {
    navigator.clipboard.writeText(summary)
  }

  const handleRegenerate = () => {
    setIsLoading(true)
    setTimeout(() => {
      const alternativeSummary =
        "Here's an alternative summary with a different perspective. This version focuses more on the practical implications and actionable insights from your content, providing a fresh take on the same material."
      setSummary(alternativeSummary)
      setIsLoading(false)
    }, 2000)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <motion.header
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="bg-white shadow-sm border-b"
      >
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <Link href="/dashboard">
              <Button variant="ghost" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Dashboard
              </Button>
            </Link>
            <div className="flex items-center space-x-2">
              <Sparkles className="h-8 w-8 text-blue-600" />
              <span className="text-2xl font-bold text-gray-900">SmartBrief</span>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant="secondary">3 credits left</Badge>
          </div>
        </div>
      </motion.header>

      <div className="container mx-auto px-4 py-8">
        <motion.div variants={fadeInUp} initial="initial" animate="animate" className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">AI Content Summarizer</h1>
          <p className="text-gray-600">Transform lengthy content into concise, actionable summaries</p>
        </motion.div>

        <div className="grid lg:grid-cols-2 gap-8">
          {/* Input Section */}
          <motion.div variants={fadeInUp} initial="initial" animate="animate" transition={{ delay: 0.1 }}>
            <Card className="h-full">
              <CardHeader>
                <CardTitle className="flex items-center">
                  <FileText className="h-5 w-5 mr-2" />
                  Input Content
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Text Input */}
                <div className="space-y-2">
                  <Label htmlFor="content">Paste your content here</Label>
                  <Textarea
                    id="content"
                    placeholder="Paste your article, document, or any text content here..."
                    className="min-h-[300px] resize-none"
                    value={inputText}
                    onChange={(e) => handleTextChange(e.target.value)}
                  />
                  <div className="flex justify-between text-sm text-gray-500">
                    <span>{wordCount} words</span>
                    <span>Max: 10,000 words</span>
                  </div>
                </div>

                {/* File Upload */}
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition-colors">
                  <Upload className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                  <p className="text-sm text-gray-600 mb-2">Or upload a document</p>
                  <Button variant="outline" size="sm">
                    Choose File
                  </Button>
                  <p className="text-xs text-gray-500 mt-2">Supports .txt, .docx files up to 10MB</p>
                </div>

                {/* Summary Options */}
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label>Summary Type</Label>
                    <Select value={summaryType} onValueChange={setSummaryType}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="concise">Concise - Key points only</SelectItem>
                        <SelectItem value="balanced">Balanced - Detailed overview</SelectItem>
                        <SelectItem value="comprehensive">Comprehensive - In-depth analysis</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label>Summary Length: {summaryLength[0]}%</Label>
                    <Slider
                      value={summaryLength}
                      onValueChange={setSummaryLength}
                      max={50}
                      min={10}
                      step={5}
                      className="w-full"
                    />
                    <div className="flex justify-between text-xs text-gray-500">
                      <span>Very Short</span>
                      <span>Detailed</span>
                    </div>
                  </div>
                </div>

                <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                  <Button
                    onClick={handleSummarize}
                    disabled={!inputText.trim() || isLoading}
                    className="w-full"
                    size="lg"
                  >
                    {isLoading ? (
                      <>
                        <RefreshCw className="h-5 w-5 mr-2 animate-spin" />
                        Generating Summary...
                      </>
                    ) : (
                      <>
                        <Wand2 className="h-5 w-5 mr-2" />
                        Generate Summary (1 credit)
                      </>
                    )}
                  </Button>
                </motion.div>
              </CardContent>
            </Card>
          </motion.div>

          {/* Output Section */}
          <motion.div variants={fadeInUp} initial="initial" animate="animate" transition={{ delay: 0.2 }}>
            <Card className="h-full">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span className="flex items-center">
                    <Sparkles className="h-5 w-5 mr-2" />
                    AI Summary
                  </span>
                  {showSummary && (
                    <div className="flex space-x-2">
                      <Button variant="outline" size="sm" onClick={handleCopy}>
                        <Copy className="h-4 w-4 mr-1" />
                        Copy
                      </Button>
                      <Button variant="outline" size="sm">
                        <Download className="h-4 w-4 mr-1" />
                        Export
                      </Button>
                    </div>
                  )}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <AnimatePresence mode="wait">
                  {isLoading && (
                    <motion.div
                      key="loading"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      className="flex flex-col items-center justify-center py-20"
                    >
                      <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4">
                        <Sparkles className="h-8 w-8 text-blue-600 animate-pulse" />
                      </div>
                      <h3 className="text-lg font-medium text-gray-900 mb-2">AI is analyzing your content</h3>
                      <p className="text-gray-600 text-center mb-4">This may take a few moments...</p>
                      <Progress value={66} className="w-48" />
                    </motion.div>
                  )}

                  {showSummary && !isLoading && (
                    <motion.div
                      key="summary"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      className="space-y-6"
                    >
                      {/* Summary Stats */}
                      <div className="grid grid-cols-3 gap-4">
                        <div className="text-center p-3 bg-blue-50 rounded-lg">
                          <div className="flex items-center justify-center mb-1">
                            <BarChart3 className="h-4 w-4 text-blue-600" />
                          </div>
                          <p className="text-sm font-medium text-blue-900">Reduction</p>
                          <p className="text-lg font-bold text-blue-600">75%</p>
                        </div>
                        <div className="text-center p-3 bg-green-50 rounded-lg">
                          <div className="flex items-center justify-center mb-1">
                            <Clock className="h-4 w-4 text-green-600" />
                          </div>
                          <p className="text-sm font-medium text-green-900">Time Saved</p>
                          <p className="text-lg font-bold text-green-600">8 min</p>
                        </div>
                        <div className="text-center p-3 bg-purple-50 rounded-lg">
                          <div className="flex items-center justify-center mb-1">
                            <FileText className="h-4 w-4 text-purple-600" />
                          </div>
                          <p className="text-sm font-medium text-purple-900">Words</p>
                          <p className="text-lg font-bold text-purple-600">{summary.split(" ").length}</p>
                        </div>
                      </div>

                      {/* Summary Content */}
                      <div className="bg-gray-50 rounded-lg p-6">
                        <p className="text-gray-800 leading-relaxed">{summary}</p>
                      </div>

                      {/* Action Buttons */}
                      <div className="flex flex-col sm:flex-row gap-3">
                        <Button variant="outline" onClick={handleRegenerate} disabled={isLoading} className="flex-1">
                          <RefreshCw className="h-4 w-4 mr-2" />
                          Regenerate
                        </Button>
                        <Button className="flex-1">
                          <Download className="h-4 w-4 mr-2" />
                          Save Summary
                        </Button>
                      </div>
                    </motion.div>
                  )}

                  {!showSummary && !isLoading && (
                    <motion.div
                      key="empty"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      className="flex flex-col items-center justify-center py-20 text-center"
                    >
                      <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                        <Sparkles className="h-8 w-8 text-gray-400" />
                      </div>
                      <h3 className="text-lg font-medium text-gray-900 mb-2">Ready to summarize</h3>
                      <p className="text-gray-600">Add your content and click "Generate Summary" to get started</p>
                    </motion.div>
                  )}
                </AnimatePresence>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </div>
    </div>
  )
}
